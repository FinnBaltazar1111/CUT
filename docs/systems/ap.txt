[TITLE]AP[UNTITLE]
[DESC]An explination of the ChromeOS boot system from CPU init to kernel loading[UNDESC]

[SECTION]Section 1 - Overview[UNSECTION]

  When a Chromebook boots up, the first action performed depends on which security software is being utilized. [RED]If a
  TI50 is used, the [UNDERLINE]GSC[NOUNDERLINE], before [UNDERLINE]AP[NOUNDERLINE] load, will verify the RO
  [UNDERLINE]AP[NOUNDERLINE] if [UNDERLINE]FWMP[UNDERLINE] is set. If this verification fails, the EC will hold the
  system in reset, effectively bricking the system, requiring a [UNDERLINE]SuzyQ[NOUNDERLINE] or external EEPROM flasher
  like a CH341A to recover.[WHITE] For unknown reasons, this check only seems to run on GSC reset, which only occurs if
  the system completely looses power.
  
  If the system uses another security chip (or the RO [UNDERLINE]AP[NOUNDERLINE] verification passes/doesn't run), the
  CPU will load the code from the AP and execute it. From here, the AP loads Coreboot, which handles hardware
  initialization before chainloading [UNDERLINE]VBoot[NOUNDERLINE]. [UNDERLINE]VBoot[NOUNDERLINE] first checks if the
  [UNDERLINE]Recovery[NOUNDERLINE] switch is set and continues accordingly.  Continuing in normal boot, it verifies the
  RW region of itself[1], then, if it's valid, it continues on to loading the region. RW then checks if the
  [UNDERLINE]Developer[NOUNDERLINE] switch is set; if it is, then it continues on to [UNDERLINE]Developer[NOUNDERLINE],
  otherwise it continues to [UNDERLINE]Verified[NOUNDERLINE].

[SECTION]Section 2 - Boot modes[NOUNDERLINE]
  
  - [SUBSECTION]Verified[NOSUBSECTION]

    1. Find all ChromeOS kernel partitions
    2. Sort them by kernel priority
    3. Check the first kernel's signing against the public key
    4. Compares the kernel's kernver with the GSC's 5. Loads [UNDERLINE]Depthcharge[NOUNDERLINE] pointing at the kernel's
    partition
    
    If steps 3 or 4 fail, it cascades verification attempts in order of priority until either the end of the list is
    reached or a kernel can be loaded.
  
  - [SUBSECTION]Recovery[NOSUBSECTION]
    
    Waits until a USB drive is inserted, then verifies the kernel on the USB against the signing key stored in the RO;
    if the key matches, the AP loads Depthcharge pointing at the kernel on the USB. The firmware does not compare the
    kernvers. If recovery is triggered while [UNDERLINE]Developer[NOUNDERLINE] mode is active,
    [UNDERLINE]FWMP[NOUNDERLINE] is set to read-only[1]. Contrary to popular belief, [BOLD]RMA Shims don't have a special
    underlying signing key[UNBOLD]. The AP actually does something quite strange here, as, while the underlying signing
    key is the same, the key actually used to sign the shim also contains a configuration option that specifies it as a
    shim.
    
  
  - [SUBSECTION]Developer[NOSUBSECTION]
    
    Upon loading, [UNDERLINE]FWMP[NOUNDERLINE] status is checked; if it's set, the firmware will refuse to load any
    other payloads and will show debugging information. There are 3 payload options from here:
      - (CTRL+U) Depthcharge (SSD): Loads Depthcharge pointing at the internal storage, skipping the validity check
        (unless dev_boot_signed_only=1)
      - (CTRL+D) Depthcharge (USB): Ditto, but with Depthcharge pointing at the USB controller
      - (CTRL+L) RW_Legacy: Jumps to the start of the RW_Legacy coreboot filesystem (Mr. Chromebox's FW_Legacy script
        modifies this)

[1] - This protection was added in CR50 update <UNKNOWN>, shipped on ChromeOS v111 and higher

[SECTION]Section 3 - Technical details[UNSECTION]
